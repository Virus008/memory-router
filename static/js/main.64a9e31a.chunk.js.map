{"version":3,"sources":["serviceWorker.js","components/pages/Home.js","components/pages/About.js","components/pages/Contact.js","components/Header.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","className","React","Component","About","Contact","Header","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCKSC,E,uKAnBP,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,aACX,sCACA,kDAEJ,yBAAKA,UAAU,gBACX,6CACA,4BACI,8FACA,6EACA,qG,GAbLC,IAAMC,WCaVC,E,uKAXP,OACI,yBAAKH,UAAU,aACX,yBAAKA,UAAU,aACX,sCACA,wD,GANAC,IAAMC,WCaXE,E,uKAXP,OACI,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,aACX,sCACA,0D,GANEC,IAAMC,WCoCbG,E,uKA9Bd,OACM,6BACJ,kBAAC,IAAD,KACC,yBAAKL,UAAU,+CACd,yBAAKA,UAAU,aACd,kBAAC,IAAD,CAAMM,GAAG,IAAIN,UAAU,gBAAvB,YACA,4BAAQA,UAAU,iBAAiBO,KAAK,SAASC,cAAY,WAAWC,cAAY,UAAUC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBACjK,0BAAMZ,UAAU,yBAEjB,yBAAKA,UAAU,2BAA2Ba,GAAG,UAC5C,yBAAKb,UAAU,cACd,kBAAC,IAAD,CAAMA,UAAU,oBAAoBM,GAAG,UAAvC,UACA,kBAAC,IAAD,CAAMN,UAAU,oBAAoBM,GAAG,YAAvC,gBAKJ,6BACA,yBAAKN,UAAU,WACd,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,SAASC,UAAWb,IACtC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,WAAWC,UAAWZ,W,GAvBxBH,IAAMC,WCA3Be,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64a9e31a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"jumbotron\">\r\n                    <h3>Hello,</h3>\r\n                    <p>This is home page.</p>\r\n                </div>\r\n                <div className=\"page-content\">\r\n                    <h5>Memory Router</h5>\r\n                    <ul>\r\n                        <li>URL in the browser doesn’t change. URL in memory changes.</li>\r\n                        <li>Good for non browser environment and testing.</li>\r\n                        <li>It doesn’t have history, so you can't go back or forward.</li>\r\n                    </ul>\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"jumbotron\">\r\n                    <h3>Hello,</h3>\r\n                    <p>This is About page.</p>\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\nclass Contact extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"jumbotron\">\r\n                    <h3>Hello,</h3>\r\n                    <p>This is Contact page.</p>\r\n                </div>    \r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React from \"react\";\r\nimport { Link, MemoryRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Contact from './pages/Contact';\r\n\r\nclass Header extends React.Component {\r\n  render() { \r\n\treturn (\r\n      \t<div>\r\n\t\t\t<Router>\r\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<Link to=\"/\" className=\"navbar-brand\">Virus008</Link>\r\n\t\t\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mynav3\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"mynav3\">\r\n\t\t\t\t\t\t\t<div className=\"navbar-nav\">\r\n\t\t\t\t\t\t\t\t<Link className=\"nav-item nav-link\" to=\"/about\">About </Link>\r\n\t\t\t\t\t\t\t\t<Link className=\"nav-item nav-link\" to=\"/contact\">Contact </Link>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<Route exact path=\"/\" component={Home}></Route>\r\n\t\t\t\t\t<Route exact path=\"/about\" component={About}></Route>\r\n\t\t\t\t\t<Route exact path=\"/contact\" component={Contact}></Route>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t  );\r\n  }\r\n}\r\n\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Header from './components/Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}